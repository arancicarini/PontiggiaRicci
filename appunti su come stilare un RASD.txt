problemi un po' più strutturali: 

- si sono un po' troppo fissati sull'uso di google maps, insistendo un po' troppo, 
mentre si sono poco focalizzati sugli altri servizi esterni scagandoli male

- molti gruppi hanno messo come requisito che bisogna avere google maps --> è un requisito troppo stringente , troppo forte

-le preferenze non sono state definite veramente bene , 
essendo che poi ci hanno fatto 14 requisiti sopra sarebbero potuti essere un po' più precisi nel definirle

-avaiability e reliability spesso sono un po' sottovalutate --> 
non è banale richiedere che sia disponibile 24/7 o che funzioni al 99,99%. 
dal punto di vista del business ci sta tirarsela con un'avaiability mega bomba 
ma se poi non sei in grado di garantirla o scleri per farlo non è così buona come cosa

-STAY FOCUS ! (l'anno scorso alcuni hanno presentato 80/90 pagine di documentazione, 
non è per forza sbagliato ma non c'è bisogno di esagerare nel descrivere tutto è importante descrivere bene le cose importanti)

-sequence diagram : sono fatti abbastanza bene ma ci sono delle cosine un po' gravi: nel secondo sono andati un po' troppo a fondo nel mostrare cosa succede dietro le quinte e sono un po' andati a finire nell'architectural diagram , mostrando proprio i componenti o le robe specifiche. è più architetturale che di requisito

-GRAVE: non c'è una chiara distinzione tra world phenomena e machine phenomena e shared phenomena --> non sono elencati nè identificati !! dove vanno messi? 
nello standard non sono presenti, quindi un botto di gruppi li ha balzati male, male molto male ! 
ci sta metterli nell'introduzione nella parte dello scope --> includere analisi di world and shared phenomena
anche nella parte del class diagram si può spiegare meglio i vari phenomena, quali sono world, quali machine, quali shared, 
le varie relazioni ed associazioni potevano essere spiegate meglio, vanno assolutamente messi ed in maniera ESPLICITA

- ALLOY MODEL: non bisogna modellizzare tutto per forza. se usiamo operations va fatto bene , con i parametri giusti. 
pre e post condizioni vanno espresse con i pred , cose che devono essere vere per i parametri in input e in output. 
nell'esempio non hanno espresso nessuna pre e post condizione e non hanno fatto nessuno controllo per le operazioni, 
male male!in questo esempio era un pochino troppo specifico, meglio rimanere più generale


ci sono dei goal che non sono giusti, ma il problema non è il login 
il goal non dovrebbe parlare della machine !! 
G5 non è molto corretto --> tutti i goal che coinvolgono l'applicazione non sono giusti, quelli sono requisiti 
"the user only uses path that matches his preferences" questo potrebbe essere il goal e il requisito "tha application takes in acocunt user's prf


in generale alcune parti non sono state approfondite tanto bene , in particolare il goal sui fattori esterni 

state diagram ci sta --> non per forza deve coinvolgere le classi del sistema ma anche solo mostrare i procedimenti più importanti , non è ovviamente necessario !
in questo caso ci sta perchè chiarisce i vari step della gestione del meeting 


non è un domain assumption e questo è vero !!! (per il motivo che avevamo detto noi) 


anche questo è un po' un problema , però ci sta per ogni goal identificare i domain assumption e i requirement 

ci sono alcuni elementi che non sono usati 
--> non bisogna modellizzare tutto ma tutto ciò che è rilevante 

bene la descrizione in cui si spiega su quali aspetti ci si vuole focalizzare per formalizzare il modello 
--> assolutamente da fare l'introduzione e la descrizione dell'alloy model spiegando quali sono gli obiettivi del model, da fare anche meglio di questa qui

ma bisogna rimanere focalizzati e modellizzare solo le cose rilevanti e non tutto già pensando al model --> 
scegliere solo le cose rilevanti e soprattutto chiarire bene gli obiettivi e cosa si vuole 


questo è sbagliato ! ci sta 
